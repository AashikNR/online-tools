{"version":3,"file":"static/webpack/static/development/pages/interval-timer.js.2d96e9a06193fd651067.hot-update.js","sources":["webpack:///./pages/interval-timer.js"],"sourcesContent":["import Layout from \"../components/layout/MainLayout\";\nimport React from \"react\";\nimport { Container, Col, Card, Row } from \"shards-react\";\nimport \"../static/css/interval-timer.css\";\nimport PageTitle from \"../components/common/PageTitle\";\n\nfunction str_pad_left(string, pad, length) {\n  return (new Array(length + 1).join(pad) + string).slice(-length);\n}\nconst init = {\n  display: \"10:00\",\n  timeElapsed: 0,\n  target: 10 * 60, // mins* seconds\n  breakTime: 2 * 60, // mins* seconds\n  workMode: true,\n  running: false\n};\nclass IntervalTimer extends React.Component {\n  componentDidMount() {\n    this.startBreak = new Audio(\"../static/sounds/start-break.wav\");\n    this.endBreak = new Audio(\"../static/sounds/end-break.wav\");\n  }\n\n  state = init;\n  timer;\n  handleStartTimer = () => {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n    const { target, breakTime } = this.state;\n    this.timer = setInterval(() => {\n      const { timeElapsed, workMode } = this.state;\n\n      const currenttype = workMode ? target : breakTime;\n      const minutes = ~~((currenttype - timeElapsed) / 60);\n      const seconds = (currenttype - timeElapsed) % 60;\n      const finalTime =\n        str_pad_left(minutes, \"0\", 2) + \":\" + str_pad_left(seconds, \"0\", 2);\n      if (!minutes && !seconds) {\n        this.setState({\n          timeElapsed: 0,\n          display: finalTime,\n          workMode: !workMode\n        });\n        if (workMode) {\n          // stop tune\n          this.startBreak.play();\n        } else {\n          this.endBreak.play();\n        }\n      } else {\n        this.setState({\n          timeElapsed: timeElapsed + 1,\n          display: finalTime,\n          running: true\n        });\n      }\n    }, 1000);\n  };\n  handleStopTimer = () => {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n    const { target, timeElapsed, workMode, breakTime } = this.state;\n    const currenttype = workMode ? target : breakTime;\n    const minutes = ~~((currenttype - timeElapsed) / 60);\n    const seconds = (currenttype - timeElapsed) % 60;\n    const finalTime =\n      str_pad_left(minutes, \"0\", 2) + \":\" + str_pad_left(seconds, \"0\", 2);\n    this.setState({\n      running: false,\n      timeElapsed: 0,\n      display: finalTime\n    });\n  };\n  handleResumeTime = v => {\n    this.setState({ breakTime: v.target.value * 60 });\n  };\n  handleTargetTime = v => {\n    this.setState({ target: v.target.value * 60 });\n  };\n  render() {\n    const { display, running, target, breakTime } = this.state;\n\n    return (\n      <Layout>\n        <Container fluid className=\"main-content-container px-4 noisy\">\n          <div className=\"emblem\">\n            <span className=\"icon-information\"></span>\n          </div>\n          <div className=\"frame\">\n            <div className=\"piece output\">\n              <h1>{display}</h1>\n            </div>\n\n            <div className=\"piece scanlines noclick\"></div>\n            <div className=\"piece glow noclick\"></div>\n          </div>\n          <div className=\"controls\">\n            <p>\n              I want to take a break after{\" \"}\n              <input\n                type=\"number\"\n                defaultValue={target / 60}\n                onChange={this.handleTargetTime}\n              ></input>{\" \"}\n              minutes for\n              <input\n                type=\"number\"\n                defaultValue={breakTime / 60}\n                onChange={this.handleResumeTime}\n              ></input>{\" \"}\n              minutes\n            </p>\n            {running ? (\n              <button onClick={this.handleStopTimer} className=\"-button\">\n                <i className=\"material-icons\">stop</i>\n                Stop\n              </button>\n            ) : (\n              <button onClick={this.handleStartTimer} className=\"play-button\">\n                <i className=\"material-icons\">play_arrow</i>\n                Start\n              </button>\n            )}\n          </div>\n        </Container>\n      </Layout>\n    );\n  }\n}\n\nexport default IntervalTimer;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AANA;AACA;AAOA;;;;;;;;;;;;;;;;;;AAMA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AA/DA;AACA;AACA;AACA;;;AA4DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;AAhHA;AACA;AAkHA;;;;A","sourceRoot":""}