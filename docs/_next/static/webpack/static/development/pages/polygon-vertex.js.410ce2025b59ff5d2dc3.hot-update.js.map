{"version":3,"file":"static/webpack/static/development/pages/polygon-vertex.js.410ce2025b59ff5d2dc3.hot-update.js","sources":["webpack:///./pages/polygon-vertex.js"],"sourcesContent":["import Layout from \"../components/layout/MainLayout\";\nimport React from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  ListGroup,\n  ListGroupItem,\n  Form,\n  FormInput,\n  Button,\n  CardHeader,\n  CardBody,\n} from \"shards-react\";\nimport PageTitle from \"../components/common/PageTitle\";\nimport { polygon, polygoncode } from \"../utils/PolygonVertex\";\n\nclass StringToHexConvertor extends React.Component {\n  state = {\n    centerx: 0,\n    centery: 0,\n    number: 4,\n    radius: 50,\n    angle: \"\",\n    vertex: [],\n    visibile: \"none\",\n  };\n\n  handleTextInputChangex = (e) => {\n    this.setState({\n      centerx: e.target.value,\n      vertex: polygon({\n        r: this.state.radius,\n        a: this.state.angle,\n        cx: e.target.value,\n        cy: this.state.centery,\n        round: this.state.round,\n        n: this.state.number,\n      }),\n    });\n  };\n  handleTextInputChangey = (e) => {\n    this.setState({\n      centery: e.target.value,\n      vertex: polygon({\n        r: this.state.radius,\n        a: this.state.angle,\n        cy: e.target.value,\n        cx: this.state.centerx,\n        round: this.state.round,\n        n: this.state.number,\n      }),\n    });\n  };\n  handleTextInputChangeside = (e) => {\n    this.setState({\n      number: e.target.value,\n    });\n    if (e.target.value > 2) {\n      this.setState({\n        vertex: polygon({\n          n: e.target.value,\n          r: this.state.radius,\n          a: this.state.angle,\n          cx: this.state.centerx,\n          cy: this.state.centery,\n          round: this.state.round,\n        }),\n      });\n    } else if (e.target.value && e.target.value >= 0) {\n      alert(\"Number of sides must be a number greater than 2\");\n    }\n  };\n  clear = (e) => {\n    this.setState({\n      vertex: [],\n    });\n  };\n  handleTextInputChangeradius = (e) => {\n    this.setState({\n      radius: e.target.value,\n    });\n    if (e.target.value > 0) {\n      this.setState({\n        vertex: polygon({\n          n: this.state.number,\n          r: e.target.value,\n          a: this.state.angle,\n          cx: this.state.centerx,\n          cy: this.state.centery,\n          round: this.state.round,\n        }),\n      });\n    } else {\n      alert(\"Radius  must be greater than zero\");\n    }\n  };\n\n  handleTextInputChangestartangle = (e) => {\n    this.setState({\n      angle: e.target.value,\n      vertex: polygon({\n        n: this.state.number,\n        r: this.state.radius,\n        a: e.target.value,\n        cx: this.state.centerx,\n        cy: this.state.centery,\n        round: this.state.round,\n      }),\n    });\n  };\n\n  render() {\n    return (\n      <Layout>\n        <Container fluid className=\"main-content-container px-4\">\n          <Row noGutters className=\"page-header py-4\">\n            <PageTitle\n              title=\"Polygon Vertex Calculator\"\n              subtitle=\"Find the polygon vertex's here \"\n              md=\"12\"\n              className=\"ml-sm-auto mr-sm-auto\"\n            />\n          </Row>\n          <Row>\n            <Col lg=\"12\">\n              <Card small className=\"mb-4\">\n                <ListGroup flush>\n                  <ListGroupItem className=\"p-3\">\n                    <Row>\n                      <Col>\n                        <Form>\n                          <Row form>\n                            <Col md=\"6\" className=\"form-group\">\n                              <Col md=\"8\" className=\"form-group\">\n                                <label htmlFor=\"x\">Center X</label>\n                                <FormInput\n                                  id=\"x\"\n                                  onChange={this.handleTextInputChangex}\n                                  placeholder=\"X-axis\"\n                                  className=\"mb-2\"\n                                />\n                              </Col>\n                              <Col md=\"8\" className=\"form-group\">\n                                <label htmlFor=\"y\">Center Y</label>\n                                <FormInput\n                                  id=\"y\"\n                                  onChange={this.handleTextInputChangey}\n                                  placeholder=\"Y-axis\"\n                                  className=\"mb-2\"\n                                />\n                              </Col>\n                              <Col md=\"8\" className=\"form-group\">\n                                <label htmlFor=\"vertex\">Number of sides</label>\n                                <FormInput\n                                  id=\"vertex\"\n                                  onChange={this.handleTextInputChangeside}\n                                  placeholder=\"Number of side's\"\n                                  className=\"mb-2\"\n                                />\n                              </Col>\n                              <Col md=\"8\" className=\"form-group\">\n                                <label htmlFor=\"radius\">Radius</label>\n                                <FormInput\n                                  id=\"radius\"\n                                  onChange={this.handleTextInputChangeradius}\n                                  placeholder=\"Radius\"\n                                  className=\"mb-2\"\n                                />\n                              </Col>\n                              <Col md=\"8\" className=\"form-group\">\n                                <label htmlFor=\"angle\">\n                                  Start angle (degrees)\n                                </label>\n                                <FormInput\n                                  id=\"angle\"\n                                  onChange={\n                                    this.handleTextInputChangestartangle\n                                  }\n                                  placeholder=\"Angle in Degree\"\n                                  className=\"mb-2\"\n                                />\n                              </Col>\n                            </Col>\n                            <Col md=\"6\" className=\"form-group\">\n                              <Row>\n                                <Col>\n                                  <Card small className=\"mb-4\">\n                                    {this.state.vertex.length > 0 ? (\n                                      <CardBody className=\"p-0 pb-3\">\n                                        {/* <h6 className=\"m-0\">\n                                          <Button\n                                            outline\n                                            theme=\"primary\"\n                                            className=\"mb-2 mr-1\"\n                                          >\n                                            Clear\n                                          </Button>\n                                        </h6> */}\n                                        <table className=\"table mb-0\">\n                                          <thead className=\"bg-light\">\n                                            <tr>\n                                              <th\n                                                scope=\"col\"\n                                                className=\"border-0\"\n                                              >\n                                                X-axis\n                                              </th>\n                                              <th\n                                                scope=\"col\"\n                                                className=\"border-0\"\n                                              >\n                                                Y-axis\n                                              </th>\n                                            </tr>\n                                          </thead>\n                                          <tbody>\n                                            {this.state.vertex.map((item) => (\n                                              <tr>\n                                                <td>{item.x}</td>\n                                                <td>{item.y}</td>\n                                              </tr>\n                                            ))}\n                                          </tbody>\n                                        </table>\n                                      </CardBody>\n                                    ) : null}\n                                  </Card>\n                                </Col>\n                              </Row>\n                            </Col>\n                          </Row>\n                        </Form>\n                      </Col>\n                    </Row>\n                  </ListGroupItem>\n                  <ListGroupItem className=\"p-4\">\n                    <strong className=\"text-muted d-block mb-2\">\n                      How it Works\n                    </strong>\n                    <pre className=\"code-part\">\n                      <code className=\"javascript p-3\">{polygoncode}</code>\n                    </pre>\n                  </ListGroupItem>\n                  <ListGroupItem className=\"p-4\">\n                    <strong className=\"text-muted d-block mb-2\">\n                      About the calculator\n                    </strong>\n                    <p>\n                      This calculator takes the parameters of a regular polygon\n                      and calculates its coordinates. It produces both the\n                      coordinates of the vertices and the coordinates of the\n                      line segments making up the sides of the polygon. It is\n                      useful to blind users and those who produce material for\n                      the sight-impaired. The programs that emboss shapes on\n                      pages for the blind need the coordinates of the lines that\n                      make up the shape. This page was designed to make it easy\n                      to produce the data needed by those programs (such as SVG\n                      Draw) to 'draw' regular polygons.\n                    </p>\n                    <p>\n                      Click the 'Calculate' button to refresh the results. Note\n                      that the y coordinates are positive downwards, to conform\n                      to the convention in most computer software. Positive x is\n                      to the right. The sides output is a table containing the\n                      start and end x,y coordinates of each side of the polygon,\n                      going counter clockwise from the first one. Below that is\n                      the same data in CSV format. The vertex output is a table\n                      containing the x and y coordinates of each vertex of the\n                      polygon, going counter clockwise from the first one. Below\n                      that is the same data in CSV format.\n                    </p>\n                    <p>\n                      <ul>\n                        <li>\n                          Center X and center Y are the coordinates of the\n                          center point of the polygon. Set initially to 0, 0.\n                          Note that the y coordinate is positive downwards, to\n                          conform to the convention in most computer software.\n                          Positive x is to the right.\n                        </li>\n                        <li>\n                          The number of sides. Must be greater than 2. Set\n                          initially to 4.\n                        </li>\n                        <li>\n                          The radius is the distance from the center to a\n                          vertex. Set initially to 50.\n                        </li>\n                        <li>\n                          Start angle is the position of the first vertex. This\n                          angle is in degrees and is the angle starting at 3\n                          o'clock going counter clockwise. So for example if you\n                          want the first vertex to be at 12 o'clock, set this to\n                          90. Set initially to blank (auto). If you leave this\n                          blank it will be set automatically: If the number of\n                          sides is odd, (e.g. a pentagon), the first vertex will\n                          be at 12 o'clock. If even, e.g. an octagon, the top\n                          and bottom sides will be horizontal on the page.\n                        </li>\n                      </ul>\n                    </p>\n                  </ListGroupItem>\n                </ListGroup>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </Layout>\n    );\n  }\n}\n\nStringToHexConvertor.getInitialProps = () => {\n  return {};\n};\n\nexport default StringToHexConvertor;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAaA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAWA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAWA;AACA;AAAA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAUA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAWA;AACA;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAGA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;;;;AArSA;AACA;AAuSA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}